buildscript {
  repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    classpath "org.grails.plugins:views-gradle:1.2.7"
    classpath 'org.grails.plugins:database-migration:3.0.3'
  }
}


final String version_regex = /^(((\d+)\.\d+)\.\d+)(-([a-z]+[\w]*))?$/
version "${appVersion}"
group "org.olf"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"

repositories {
  mavenLocal()
  maven { url 'https://repo.grails.org/grails/core' }
  maven { url 'http://maven.k-int.com/content/repositories/releases' }
  maven { url 'http://maven.k-int.com/content/repositories/private' }
}

dependencies {
  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-undertow"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-codecs"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-datasource"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:5.1.5.Final"
  compile "org.grails.plugins:views-json:1.2.7"
  console "org.grails:grails-console"
  profile "org.grails.profiles:rest-api"
  runtime "org.glassfish.web:el-impl:2.1.2-b03"
  runtime "com.h2database:h2"
  runtime "org.apache.tomcat:tomcat-jdbc"
  testCompile "org.grails:grails-gorm-testing-support"
  testCompile "org.grails:grails-datastore-rest-client"
  testCompile "org.grails:grails-web-testing-support"
  testCompile "org.grails.plugins:geb:1.1.2"
  testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
  testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

  // Custom non profile deps.

  compile "org.postgresql:postgresql:42.2.2"

  runtime "org.grails.plugins:async"
  runtime "org.grails.plugins:events"

  compile "org.grails.plugins:spring-security-core:3.2.0"
  compile 'org.grails.plugins:database-migration:3.0.3'
  compile 'org.liquibase:liquibase-core:3.5.3'

}

// Changed this to enable inline development of the includes listed below.
def includes = [
  'web-toolkit'   : 'com.k_int.grails:web-toolkit:3.3.4',
  'grails-okapi'  : 'com.k_int.okapi:grails-okapi:3.3.6'
]

bootRun {
  jvmArgs('-Dspring.output.ansi.enabled=always')
  addResources = true
  String springProfilesActive = 'spring.profiles.active'
  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
  systemProperty "geb.env", System.getProperty('geb.env')
  systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
  systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
  systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

sourceSets {
  main {
    resources {
      srcDir 'grails-app/migrations'
    }
  }
}

task generateDescriptors(type: Copy) {

  dependsOn buildProperties

  File grailsBuildInfoFile = buildProperties.outputs.files.files.find { it.name == 'grails.build.info' }

  final def props = [:]

  if(!(grailsBuildInfoFile)) return // No need to continue if the file is not there

  doFirst {

    // Place the loading within a do first as the info file from the buildProperties
    // task will not be present until it is executed. This owuld cause a file not found
    // during task configureation otherwise.
    Properties properties = new Properties()

    // Read properties from the file
    grailsBuildInfoFile.withInputStream {
      properties.load(it)
    }

    // Need to parse multi-dimensional keys.
    ConfigSlurper cs = new ConfigSlurper()
    props.putAll(cs.parse(properties))
  }

  from ('./src/okapi') {
    include '*-template.json'
  }
  into './build/resources/okapi'
  filteringCharset = 'UTF-8'
  expand(props)
  rename { String fileName ->
    fileName.replace('-template', '')
  }
}

jar {
  version "${version.replaceAll(version_regex, '$2')}"
}

springBoot {
  // Enable the creation of a fully
  // executable archive file.
  executable = true
  embeddedLaunchScriptProperties = [
    'mode': 'service',
    'inlinedConfScript': 'spring-boot.conf',
    'logFolder': '${jarfolder}',
    'pidFolder': '${jarfolder}'
  ]
}

buildProperties.doLast {

  // Find the right file
  File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }

  if(!grailsBuildInfoFile) return // No need to continue if the file is not there
    Properties properties = new Properties()

  // Read properties from the file
  grailsBuildInfoFile.withInputStream {
    properties.load(it)
  }

  // Load the app version
  String version = properties.getProperty('info.app.version')
  def versionParts
  if (version && (versionParts = version =~ version_regex)) {
    versionParts[0].with {
      properties.setProperty('info.app.majorVersion', it[3])
      properties.setProperty('info.app.minorVersion', it[2])
      properties.setProperty('info.app.patchVersion', it[1])

      if (it[5]) {
        properties.setProperty('info.app.testVersion', it[5])
      }
    }
    version.replaceAll(/^(((\d+)\.\d+)\.\d+)(-([\w]+))?$/ , '$1')
  }

  // Add new properties from various sources
  properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))

  // Get a System property
  properties.setProperty('build.java.version', System.getProperty('java.version'))

  // Write the properties back to the file
  grailsBuildInfoFile.withOutputStream {
    properties.store(it,null)
  }
}

processResources.dependsOn generateDescriptors
//assemble.dependsOn generateDescriptors

includes?.each { String projectName, String mavenString ->
  def igp = subprojects?.find {
    if (it.name == "${projectName}") {
      return it
    }
    false
  }

  if (igp) {
    println "Using local ${igp.name} at ${igp.projectDir}"
    grails {
      plugins {
        compile igp
      }
    }
  } else {
    // Use declared maven version.
    println "Installing ${projectName} from maven"
    dependencies {
      compile "${mavenString}"
    }
  }
}
